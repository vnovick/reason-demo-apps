// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonApollo from "reason-apollo/src/ReasonApollo.bs.js";
import * as Post$ReasonreactSimpleBlogCms from "./Post.js";

var ppx_printed_query = "subscription getPosts  {\nposts(order_by: {created_at: desc})  {\ntitle  \ncover_img  \ncontent  \ncreated_at  \nuser  {\nname  \navatar_url  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "posts");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "title");
                  var field_title;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    field_title = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    field_title = Js_exn.raiseError("graphql_ppx: Field title on type posts is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "cover_img");
                  var field_cover_img;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeNull(value$3);
                    if (match$4 !== undefined) {
                      field_cover_img = undefined;
                    } else {
                      var match$5 = Js_json.decodeString(value$3);
                      field_cover_img = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    }
                  } else {
                    field_cover_img = undefined;
                  }
                  var match$6 = Js_dict.get(value$1, "content");
                  var field_content;
                  if (match$6 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$6);
                    var match$7 = Js_json.decodeString(value$4);
                    field_content = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    field_content = Js_exn.raiseError("graphql_ppx: Field content on type posts is missing");
                  }
                  var match$8 = Js_dict.get(value$1, "created_at");
                  var field_created_at = match$8 !== undefined ? Caml_option.valFromOption(match$8) : Js_exn.raiseError("graphql_ppx: Field created_at on type posts is missing");
                  var match$9 = Js_dict.get(value$1, "user");
                  var field_user;
                  if (match$9 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$9);
                    var match$10 = Js_json.decodeObject(value$5);
                    if (match$10 !== undefined) {
                      var value$6 = Caml_option.valFromOption(match$10);
                      var match$11 = Js_dict.get(value$6, "name");
                      var field_name;
                      if (match$11 !== undefined) {
                        var value$7 = Caml_option.valFromOption(match$11);
                        var match$12 = Js_json.decodeString(value$7);
                        field_name = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                      } else {
                        field_name = Js_exn.raiseError("graphql_ppx: Field name on type users is missing");
                      }
                      var match$13 = Js_dict.get(value$6, "avatar_url");
                      var field_avatar_url;
                      if (match$13 !== undefined) {
                        var value$8 = Caml_option.valFromOption(match$13);
                        var match$14 = Js_json.decodeString(value$8);
                        field_avatar_url = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                      } else {
                        field_avatar_url = Js_exn.raiseError("graphql_ppx: Field avatar_url on type users is missing");
                      }
                      field_user = /* record */[
                        /* name */field_name,
                        /* avatar_url */field_avatar_url
                      ];
                    } else {
                      field_user = Js_exn.raiseError("graphql_ppx: Expected object of type users, got " + JSON.stringify(value$5));
                    }
                  } else {
                    field_user = Js_exn.raiseError("graphql_ppx: Field user on type posts is missing");
                  }
                  return /* record */[
                          /* title */field_title,
                          /* cover_img */field_cover_img,
                          /* content */field_content,
                          /* created_at */field_created_at,
                          /* user */field_user
                        ];
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected object of type posts, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field posts on type subscription_root is missing");
    }
    return {
            posts: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var PostsQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetPostsSubscription = ReasonApollo.CreateSubscription([
      ppx_printed_query,
      parse
    ]);

function PostsList(Props) {
  return React.createElement("div", {
              className: "flex flex-wrap"
            }, React.createElement(GetPostsSubscription[/* make */4], {
                  children: (function (param) {
                      var result = param[/* result */0];
                      if (typeof result === "number") {
                        return "Loading";
                      } else if (result.tag) {
                        var posts = result[0].posts;
                        return $$Array.map((function (post) {
                                      return React.createElement("div", {
                                                  className: "bg-white rounded-t-lg overflow-hidden p-4 p-10 flex justify-center"
                                                }, React.createElement(Post$ReasonreactSimpleBlogCms.make, {
                                                      post: post
                                                    }));
                                    }), posts);
                      } else {
                        console.log(result[0]);
                        return "Error";
                      }
                    })
                }));
}

var make$1 = PostsList;

export {
  PostsQuery ,
  GetPostsSubscription ,
  make$1 as make,
  
}
/* GetPostsSubscription Not a pure module */
